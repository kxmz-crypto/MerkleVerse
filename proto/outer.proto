syntax = "proto3";
import "proto/inner.proto";

package mverseouter;

message Empty{}

service MerkleVerse {
  rpc GetRoot(mversegrpc.GetMerkleRootRequest) returns (mversegrpc.GetMerkleRootResponse) {}
  rpc GetCurrentRoot(Empty) returns (mversegrpc.GetMerkleRootResponse) {}
  rpc LookUpLatest(mversegrpc.LookUpLatestRequest) returns (mversegrpc.LookUpLatestResponse) {}
  rpc Transaction(mversegrpc.TransactionRequest) returns (mversegrpc.TransactionResponse) {}
  rpc ClientTransaction(ClientTransactionRequest) returns (mversegrpc.TransactionResponse) {}
  rpc PeerTransaction(PeerTransactionRequest) returns (mversegrpc.TransactionResponse) {}
  rpc PeerPrepare(PeerPrepareRequest) returns (Empty) {}
  rpc PeerCommit(PeerCommitRequest) returns (Empty) {}
  rpc LookUpHistory(mversegrpc.LookupHistoryRequest) returns (mversegrpc.LookUpHistoryResponse) {}
  rpc GetServerInformation(Empty) returns (ServerInformationResponse) {}
}

// The data that peer sends to others to identify themselves
message ServerIdentity {
  string server_id = 1;
}

message ServerInformationResponse{
  string server_name = 1;
  string server_id = 2;
}

message PeerCommitRequest {
  mversegrpc.Epoch epoch = 1;
  bytes signature = 2;
  ServerIdentity peer_identity = 3;
}

message PeerPrepareRequest {
  mversegrpc.Epoch epoch = 1;
  ServerIdentity peer_identity = 2; // Maybe add a checksum for all the transactions processed by a single server later
}

message ClientTransactionRequest {
  mversegrpc.TransactionRequest transaction = 2;
  optional bytes auxiliary = 3;
}

message PeerTransactionRequest {
  mversegrpc.Epoch epoch = 1;
  mversegrpc.TransactionRequest transaction = 2;
  bytes signature = 3;
  optional bytes auxiliary = 4;
}
